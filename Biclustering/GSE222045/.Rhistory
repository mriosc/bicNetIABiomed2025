paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_KEGG_plot.pdf"),
p
)
}
} else {
message("丘멆잺 KEGG enrichment con resultados vac칤os para bicluster ", id)
min_kegg <- NA
}
} else {
min_kegg <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go, Min_KEGG_qvalue = min_kegg)
)
}
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
Min_KEGG_qvalue = numeric(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# Enriquecimiento KEGG
kegg <- tryCatch({
enrichKEGG(entrez_ids, pAdjustMethod = "BH")
}, error = function(e) {
message("丘멆잺 Error en enrichKEGG para bicluster ", id, ": ", e$message)
NULL
})
if (!is.null(kegg) && inherits(kegg, "enrichResult") && nrow(kegg@result) > 0) {
# Comprobamos que las columnas necesarias existen
required_cols <- c("Description", "p.adjust", "geneID", "Count")
if (all(required_cols %in% colnames(kegg@result))) {
# Filtramos filas con valores no NA
kegg_valid <- subset(kegg@result, !is.na(Description) & !is.na(p.adjust))
if (nrow(kegg_valid) > 0) {
min_kegg <- min(kegg_valid$p.adjust, na.rm = TRUE)
write.csv(kegg_valid, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_KEGG.csv"), row.names = FALSE)
# Reasignamos los resultados v치lidos al objeto original
kegg@result <- kegg_valid
# Solo graficar si hay al menos 1 t칠rmino con Count > 0
if (any(kegg_valid$Count > 0)) {
p <- tryCatch({
dotplot(kegg)
}, error = function(e) {
message("丘멆잺 Error en dotplot KEGG para bicluster ", id, ": ", e$message)
NULL
})
if (!is.null(p)) {
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_KEGG_plot.pdf"),
p
)
} else {
message("丘멆잺 dotplot(kegg) devolvi칩 NULL para bicluster ", id)
}
} else {
message("丘멆잺 KEGG sin t칠rminos con Count > 0 en bicluster ", id)
}
} else {
message("丘멆잺 KEGG con filas pero sin valores v치lidos para bicluster ", id)
min_kegg <- NA
}
} else {
message("丘멆잺 KEGG enrichment sin columnas requeridas para bicluster ", id)
min_kegg <- NA
}
} else {
message("丘멆잺 enrichKEGG nulo o sin resultados para bicluster ", id)
min_kegg <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go, Min_KEGG_qvalue = min_kegg)
)
}
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
# Ordenar y guardar resumen
resumen$Min_GO_qvalue <- as.numeric(resumen$Min_GO_qvalue)
View(resumen)
resumen <- resumen[order(resumen$Min_GO_qvalue, na.last = TRUE), ]
write.csv(resumen, "4_resultados_enrichment/normal/FC_1/resumen_pvalores_biclusters.csv", row.names = FALSE)
# Mostrar el m치s significativo
cat("\n游늷 Bicluster m치s significativo (GO):\n")
print(head(resumen, 1))
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_2/FC2_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
setwd("/home/principalpc/git-repositories/bicNetIABiomed2025/Biclustering/GSE64763") # Path Aurelio
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_2/FC2_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
View(resumen)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
# Ordenar y guardar resumen
resumen$Min_GO_qvalue <- as.numeric(resumen$Min_GO_qvalue)
resumen <- resumen[order(resumen$Min_GO_qvalue, na.last = TRUE), ]
write.csv(resumen, "4_resultados_enrichment/normal/FC_1/resumen_pvalores_biclusters.csv", row.names = FALSE)
# Mostrar el m치s significativo
cat("\n游늷 Bicluster m치s significativo (GO):\n")
print(head(resumen, 1))
View(resumen)
setwd("/home/principalpc/git-repositories/bicNetIABiomed2025/Biclustering/GSE222045") # Path Aurelio
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
setwd("/home/principalpc/git-repositories/bicNetIABiomed2025/Biclustering/GSE64763") # Path Aurelio
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
# Ordenar y guardar resumen
resumen$Min_GO_qvalue <- as.numeric(resumen$Min_GO_qvalue)
resumen <- resumen[order(resumen$Min_GO_qvalue, na.last = TRUE), ]
write.csv(resumen, "4_resultados_enrichment/normal/FC_1/resumen_pvalores_biclusters.csv", row.names = FALSE)
# Mostrar el m치s significativo
cat("\n游늷 Bicluster m치s significativo (GO):\n")
print(head(resumen, 1))
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_2/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_2/FC2_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
setwd("/home/principalpc/git-repositories/bicNetIABiomed2025/Biclustering/GSE222045") # Path Aurelio
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
setwd("/home/principalpc/git-repositories/bicNetIABiomed2025/Biclustering/GSE222045") # Path Aurelio
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_1/FC1_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_1/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
# Ordenar y guardar resumen
resumen$Min_GO_qvalue <- as.numeric(resumen$Min_GO_qvalue)
resumen <- resumen[order(resumen$Min_GO_qvalue, na.last = TRUE), ]
write.csv(resumen, "4_resultados_enrichment/normal/FC_1/resumen_pvalores_biclusters.csv", row.names = FALSE)
# Mostrar el m치s significativo
cat("\n游늷 Bicluster m치s significativo (GO):\n")
print(head(resumen, 1))
View(resumen)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_2/FC2_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
View(biclusters)
# Leer el CSV
biclusters <- read.csv("3_Filtrados_elite/normal/FC_3/FC3_normal_DEGs_symbols_deduplicated_biclusters_elite.csv", stringsAsFactors = FALSE)
View(biclusters)
# Inicializar tabla resumen
resumen <- data.frame(
Bicluster = character(),
Min_GO_qvalue = numeric(),
Top_GO_term = character(),
stringsAsFactors = FALSE
)
# Recorrer cada bicluster
for (i in 1:nrow(biclusters)) {
id <- biclusters$Bicluster[i]
genes_raw <- biclusters$Genes[i]
genes <- unlist(strsplit(genes_raw, ";"))
genes <- trimws(genes)
# Mapear a ENTREZ
entrez_ids <- mapIds(hgu133plus2.db, keys = genes, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Enriquecimiento GO
go <- enrichGO(entrez_ids, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = "BH")
if (!is.null(go) && nrow(go@result) > 0) {
min_go <- min(go@result$p.adjust, na.rm = TRUE)
top_go <- go@result$Description[which.min(go@result$p.adjust)]
write.csv(go@result, paste0("4_resultados_enrichment/normal/FC_3/Bicluster_", id, "_GO.csv"), row.names = FALSE)
plot_go <- dotplot(go, split = "ONTOLOGY")
# Verificar que 'ONTOLOGY' existe en los resultados
if ("ONTOLOGY" %in% colnames(go@result)) {
plot_go <- plot_go + facet_grid(ONTOLOGY ~ ., scale = "free", space = "free")
}
ggsave(
paste0("4_resultados_enrichment/normal/FC_3/Bicluster_", id, "_GO_plot.pdf"),
plot_go
)
} else {
min_go <- NA
top_go <- NA
}
# A침adir a la tabla resumen
resumen <- rbind(
resumen,
data.frame(Bicluster = id, Min_GO_qvalue = min_go, Top_GO_term = top_go)
)
}
# Ordenar y guardar resumen
resumen$Min_GO_qvalue <- as.numeric(resumen$Min_GO_qvalue)
resumen <- resumen[order(resumen$Min_GO_qvalue, na.last = TRUE), ]
write.csv(resumen, "4_resultados_enrichment/normal/FC_3/resumen_pvalores_biclusters.csv", row.names = FALSE)
# Mostrar el m치s significativo
cat("\n游늷 Bicluster m치s significativo (GO):\n")
print(head(resumen, 1))
